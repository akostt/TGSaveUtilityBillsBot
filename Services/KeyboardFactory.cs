using Telegram.Bot.Types.ReplyMarkups;
using TGSaveUtilityBillsBot.Constants;
using TGSaveUtilityBillsBot.Interfaces;
using TGSaveUtilityBillsBot.Models;

namespace TGSaveUtilityBillsBot.Services;

public class KeyboardFactory : IKeyboardFactory
{
    public InlineKeyboardMarkup CreateYearKeyboard()
    {
        var currentYear = DateTime.Now.Year;
        var buttons = new List<List<InlineKeyboardButton>>
        {
            new()
            {
                InlineKeyboardButton.WithCallbackData(
                    $"üìÖ {currentYear - 1} (–ø—Ä–µ–¥—ã–¥—É—â–∏–π)",
                    $"{CallbackDataPrefixes.Year}{currentYear - 1}"
                )
            },
            new()
            {
                InlineKeyboardButton.WithCallbackData(
                    $"üìÖ {currentYear} (—Ç–µ–∫—É—â–∏–π)",
                    $"{CallbackDataPrefixes.Year}{currentYear}"
                )
            },
            new()
            {
                InlineKeyboardButton.WithCallbackData(
                    $"üìÖ {currentYear + 1} (—Å–ª–µ–¥—É—é—â–∏–π)",
                    $"{CallbackDataPrefixes.Year}{currentYear + 1}"
                )
            },
            new()
            {
                InlineKeyboardButton.WithCallbackData(
                    "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                    CallbackDataPrefixes.ManualYear
                )
            }
        };

        return new InlineKeyboardMarkup(buttons);
    }

    public InlineKeyboardMarkup CreateMonthKeyboard()
    {
        var buttons = new List<List<InlineKeyboardButton>>();
        var months = Enum.GetValues<Month>();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        for (int i = 0; i < months.Length; i += 3)
        {
            var row = new List<InlineKeyboardButton>();
            for (int j = i; j < Math.Min(i + 3, months.Length); j++)
            {
                var month = months[j];
                row.Add(InlineKeyboardButton.WithCallbackData(
                    month.ToString(),
                    $"{CallbackDataPrefixes.Month}{(int)month}"
                ));
            }
            buttons.Add(row);
        }

        return new InlineKeyboardMarkup(buttons);
    }

    public InlineKeyboardMarkup CreateCompanyKeyboard()
    {
        var buttons = Enum.GetValues<Company>()
            .Select(company => new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(
                    company.ToString().Replace("_", " "),
                    $"{CallbackDataPrefixes.Company}{company}"
                )
            })
            .ToList();

        return new InlineKeyboardMarkup(buttons);
    }

    public InlineKeyboardMarkup CreateDocumentTypeKeyboard()
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        foreach (var docType in Enum.GetValues<DocumentType>())
        {
            var emoji = docType == DocumentType.–ö–≤–∏—Ç–∞–Ω—Ü–∏—è ? "üßæ" : "üßæ";
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{emoji} {docType}",
                    $"{CallbackDataPrefixes.DocumentType}{docType}"
                )
            });
        }

        return new InlineKeyboardMarkup(buttons);
    }

    public InlineKeyboardMarkup CreateCancelKeyboard()
    {
        var buttons = new List<List<InlineKeyboardButton>>
        {
            new()
            {
                InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", CallbackDataPrefixes.Cancel + "upload")
            }
        };

        return new InlineKeyboardMarkup(buttons);
    }

    public InlineKeyboardMarkup CreateOverwriteConfirmationKeyboard()
    {
        var buttons = new List<List<InlineKeyboardButton>>
        {
            new()
            {
                InlineKeyboardButton.WithCallbackData("üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", CallbackDataPrefixes.Overwrite + "yes")
            },
            new()
            {
                InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∞", CallbackDataPrefixes.Cancel + "overwrite")
            }
        };

        return new InlineKeyboardMarkup(buttons);
    }
}

