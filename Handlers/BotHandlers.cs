using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TGSaveUtilityBillsBot.Models;
using TGSaveUtilityBillsBot.Services;

namespace TGSaveUtilityBillsBot.Handlers;

public class BotHandlers
{
    private readonly Dictionary<long, UserState> _userStates = new();
    private readonly YandexDiskService _yandexDiskService;

    public BotHandlers(YandexDiskService yandexDiskService)
    {
        _yandexDiskService = yandexDiskService;
    }

    public async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        try
        {
            if (update.Type == UpdateType.Message && update.Message != null)
            {
                await HandleMessageAsync(botClient, update.Message, cancellationToken);
            }
            else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
            {
                await HandleCallbackQueryAsync(botClient, update.CallbackQuery, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}");
        }
    }

    private async Task HandleMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;

        if (message.Type == MessageType.Text && message.Text != null)
        {
            if (message.Text.StartsWith("/"))
            {
                await HandleCommandAsync(botClient, message, cancellationToken);
            }
            else
            {
                await HandleTextMessageAsync(botClient, message, cancellationToken);
            }
        }
        else if (message.Type == MessageType.Document && message.Document != null)
        {
            await HandleDocumentAsync(botClient, message, cancellationToken);
        }
    }

    private async Task HandleCommandAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;
        var command = message.Text!.ToLower();

        switch (command)
        {
            case "/start":
                await botClient.SendTextMessageAsync(
                    chatId,
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–π!\n\n" +
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ —á–µ–∫–∞.",
                    cancellationToken: cancellationToken
                );
                break;

            case "/upload":
                _userStates[chatId] = new UserState
                {
                    State = UserStateEnum.WaitingForYear,
                    CurrentBill = new BillMetadata()
                };

                await botClient.SendTextMessageAsync(
                    chatId,
                    "üìÖ –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024):",
                    cancellationToken: cancellationToken
                );
                break;

            case "/cancel":
                if (_userStates.ContainsKey(chatId))
                {
                    _userStates.Remove(chatId);
                }

                await botClient.SendTextMessageAsync(
                    chatId,
                    "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    cancellationToken: cancellationToken
                );
                break;

            case "/help":
                await botClient.SendTextMessageAsync(
                    chatId,
                    "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                    "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
                    "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é\n" +
                    "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n" +
                    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                    cancellationToken: cancellationToken
                );
                break;

            default:
                await botClient.SendTextMessageAsync(
                    chatId,
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                    cancellationToken: cancellationToken
                );
                break;
        }
    }

    private async Task HandleTextMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;

        if (!_userStates.TryGetValue(chatId, out var userState))
        {
            await botClient.SendTextMessageAsync(
                chatId,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.",
                cancellationToken: cancellationToken
            );
            return;
        }

        switch (userState.State)
        {
            case UserStateEnum.WaitingForYear:
                if (int.TryParse(message.Text, out var year) && year >= 2000 && year <= 2100)
                {
                    userState.CurrentBill!.Year = year;
                    userState.State = UserStateEnum.WaitingForMonth;

                    var monthKeyboard = CreateMonthKeyboard();
                    await botClient.SendTextMessageAsync(
                        chatId,
                        "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                        replyMarkup: monthKeyboard,
                        cancellationToken: cancellationToken
                    );
                }
                else
                {
                    await botClient.SendTextMessageAsync(
                        chatId,
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024):",
                        cancellationToken: cancellationToken
                    );
                }
                break;
        }
    }

    private async Task HandleCallbackQueryAsync(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var chatId = callbackQuery.Message!.Chat.Id;
        var data = callbackQuery.Data!;

        await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);

        if (!_userStates.TryGetValue(chatId, out var userState))
        {
            return;
        }

        if (data.StartsWith("month_"))
        {
            var monthValue = int.Parse(data.Replace("month_", ""));
            userState.CurrentBill!.Month = (Month)monthValue;
            userState.State = UserStateEnum.WaitingForCompany;

            var companyKeyboard = CreateCompanyKeyboard();
            await botClient.EditMessageTextAsync(
                chatId,
                callbackQuery.Message.MessageId,
                $"‚úÖ –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {userState.CurrentBill.Month}\n\nüè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:",
                replyMarkup: companyKeyboard,
                cancellationToken: cancellationToken
            );
        }
        else if (data.StartsWith("company_"))
        {
            var companyName = data.Replace("company_", "");
            userState.CurrentBill!.Company = Enum.Parse<Company>(companyName);
            userState.State = UserStateEnum.WaitingForFile;

            await botClient.EditMessageTextAsync(
                chatId,
                callbackQuery.Message.MessageId,
                $"‚úÖ –ì–æ–¥: {userState.CurrentBill.Year}\n" +
                $"‚úÖ –ú–µ—Å—è—Ü: {userState.CurrentBill.Month}\n" +
                $"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {userState.CurrentBill.Company}\n\n" +
                $"üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
                cancellationToken: cancellationToken
            );
        }
    }

    private async Task HandleDocumentAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;

        if (!_userStates.TryGetValue(chatId, out var userState) || 
            userState.State != UserStateEnum.WaitingForFile)
        {
            await botClient.SendTextMessageAsync(
                chatId,
                "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏.",
                cancellationToken: cancellationToken
            );
            return;
        }

        var document = message.Document!;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
        if (!document.FileName!.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
        {
            await botClient.SendTextMessageAsync(
                chatId,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
                cancellationToken: cancellationToken
            );
            return;
        }

        try
        {
            var processingMessage = await botClient.SendTextMessageAsync(
                chatId,
                "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...",
                cancellationToken: cancellationToken
            );

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
            var fileInfo = await botClient.GetFileAsync(document.FileId, cancellationToken);
            
            using var memoryStream = new MemoryStream();
            await botClient.DownloadFileAsync(fileInfo.FilePath!, memoryStream, cancellationToken);
            memoryStream.Position = 0;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            var success = await _yandexDiskService.UploadFileAsync(
                userState.CurrentBill!,
                memoryStream,
                document.FileName
            );

            if (success)
            {
                await botClient.EditMessageTextAsync(
                    chatId,
                    processingMessage.MessageId,
                    $"‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n" +
                    $"üìÅ –ü—É—Ç—å: –ö–≤–∏—Ç–∞–Ω—Ü–∏–∏/{userState.CurrentBill.Year}/{userState.CurrentBill.Month}/{userState.CurrentBill.Company}/{document.FileName}\n\n" +
                    $"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.",
                    cancellationToken: cancellationToken
                );
            }
            else
            {
                await botClient.EditMessageTextAsync(
                    chatId,
                    processingMessage.MessageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    cancellationToken: cancellationToken
                );
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            _userStates.Remove(chatId);
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(
                chatId,
                $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex.Message}",
                cancellationToken: cancellationToken
            );
            _userStates.Remove(chatId);
        }
    }

    private InlineKeyboardMarkup CreateMonthKeyboard()
    {
        var buttons = new List<List<InlineKeyboardButton>>();
        var months = Enum.GetValues<Month>();

        for (int i = 0; i < months.Length; i += 3)
        {
            var row = new List<InlineKeyboardButton>();
            for (int j = i; j < Math.Min(i + 3, months.Length); j++)
            {
                var month = months[j];
                row.Add(InlineKeyboardButton.WithCallbackData(
                    month.ToString(),
                    $"month_{(int)month}"
                ));
            }
            buttons.Add(row);
        }

        return new InlineKeyboardMarkup(buttons);
    }

    private InlineKeyboardMarkup CreateCompanyKeyboard()
    {
        var buttons = new List<List<InlineKeyboardButton>>();
        var companies = Enum.GetValues<Company>();

        foreach (var company in companies)
        {
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(
                    company.ToString().Replace("_", " "),
                    $"company_{company}"
                )
            });
        }

        return new InlineKeyboardMarkup(buttons);
    }

    public Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        Console.WriteLine($"–û—à–∏–±–∫–∞ Telegram API: {exception.Message}");
        return Task.CompletedTask;
    }
}

